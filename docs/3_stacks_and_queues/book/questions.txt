3.1 Three in One: Describe how you could use a single array to implement three stacks.
Hints: #2, #12, #38, #58

#2  3.1 A stack is simply a data structure in which the most recently added elements are
        removed first. Can you simulate a single stack using an array? Remember that there are
        many possible solutions, and there are tradeoffs of each.
#12 3.1 We could simulate three stacks in an array by just allocating the first third of the array to
        the first stack, the second third to the second stack, and the final third to the third stack.
        One might actually be much bigger than the others, though. Can we be more flexible
        with the divisions?
#34 3.1 If you want to allow for flexible divisions, you can shift stacks around. Can you ensure
        that all available capacity is used?
#58 3.1 Try thinking about the array as circular, such that the end of the array "wraps around" to
        the start of the array.
=========================================================================================================
3.2 Stack Min: How would you design a stack which, in addition to push and pop, has a function min
which returns the minimum element? Push, pop and min should all operate in 0(1) time.
Hints: #27, #59, #78

#27 3.2 Observe that the minimum element doesn't change very often. It only changes when a
        smaller element is added, or when the smallest element is popped.
#59 3.2 What if we kept track of extra data at each stack node? What sort of data might make it
        easier to solve the problem?
#78 3.2 Consider having each node know the minimum of its "substack" (all the elements
        beneath it, including itself).
=========================================================================================================
3.3 Stack of Plates: Imagine a (literal) stack of plates. If the stack gets too high, it might topple.
Therefore, in real life, we would likely start a new stack when the previous stack exceeds some
threshold. Implement a data structure SetOfStacks that mimics this. SetOfStacks should be
composed of several stacks and should create a new stack once the previous one exceeds capacity.
SetOfStacks. push () and SetOfStacks. pop () should behave identically to a single stack
(that is, pop ( ) should return the same values as it would if there were just a single stack).
FOLLOW UP
Implement a function popAt (int index) which performs a pop operation on a specific sub-stack.
Hints: #64, #81

#64 3.3 You will need to keep track of the size of each substack. When one stack is full, you may
        need to create a new stack.
#81 3.3 Popping an element at a specific substack will mean that some stacks aren't at full
        capacity. Is this an issue? There's no right answer, but you should think about how to
        handle this.
=========================================================================================================
3.4 Queue via Stacks: Implement a MyQueue class which implements a queue using two stacks.
Hints: #98, #114

#98  3.4 The major difference between a queue and a stack is the order of elements. A queue
         removes the oldest item and a stack removes the newest item. How could you remove
         the oldest item from a stack if you only had access to the newest item?
#114 3.4 We can remove the oldest item from a stack by repeatedly removing the newest item
         (inserting those into the temporary stack) until we get down to one element. Then, after
         we've retrieved the newest item, putting all the elements back. The issue with this is
         that doing several pops in a row will require 0 (N) work each time. Can we optimize for
         scenarios where we might do several pops in a row?
=========================================================================================================
3.5 Sort Stack: Write a program to sort a stack such that the smallest items are on the top. You can use
an additional temporary stack, but you may not copy the elements into any other data structure
(such as an array). The stack supports the following operations: push, pop, peek, and isEmpty.
Hints: #15, #32, #43

#15 3.5 One way of sorting an array is to iterate through the array and insert each element into
        a new array in sorted order. Can you do this with a stack?
#32 3.5 Imagine your secondary stack is sorted. Can you insert elements into it in sorted order?
        You might need some extra storage. What could you use for extra storage?
#43 3.5 Keep the secondary stack in sorted order, with the biggest elements on the top. Use the
        primary stack for additional storage.
=========================================================================================================
3.6 Animal Shelter: An animal shelter, which holds only dogs and cats, operates on a strictly"first in,
first out" basis. People must adopt either the "oldest" (based on arrival time) of all animals at the shelter,
or they can select whether they would prefer a dog or a cat (and will receive the oldest animal of
that type). They cannot select which specific animal they would like. Create the data structures to
maintain this system and implement operations such as enqueue, dequeueAny, dequeueDog,
and dequeueCat. You may use the built-in Linked List data structure.
Hints: #22, #56, #63

#22 3.6 We could consider keeping a single linked list for dogs and cats, and then iterating
        through it to find the first dog (or cat). What is the impact of doing this?
#56 3.6 Let's suppose we kept separate lists for dogs and cats. How would we find the oldest
        animal of any type? Be creative!
#63 3.6 Think about how you'd do it in real life. You have a list of dogs in chronological order and
        a list of cats in chronological order. What data would you need to find the oldest animal?
        How would you maintain this data?
=========================================================================================================
Additional Questions: Linked Lists (#2.6), Moderate Problems (#16.26), Hard Problems (#17.9).
Hints start on page 653.
=========================================================================================================