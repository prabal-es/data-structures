3.1 Three in One: Describe how you could use a single array to implement three stacks.
Hints: #2, #12, #38, #58

#2  3.1 A stack is simply a data structure in which the most recently added elements are
        removed first. Can you simulate a single stack using an array? Remember that there are
        many possible solutions, and there are tradeoffs of each.
#12 3.1 We could simulate three stacks in an array by just allocating the first third of the array to
        the first stack, the second third to the second stack, and the final third to the third stack.
        One might actually be much bigger than the others, though. Can we be more flexible
        with the divisions?
#34 3.1 If you want to allow for flexible divisions, you can shift stacks around. Can you ensure
        that all available capacity is used?
#58 3.1 Try thinking about the array as circular, such that the end of the array "wraps around" to
        the start of the array.
=========================================================================================================
3.2 Stack Min: How would you design a stack which, in addition to push and pop, has a function min
which returns the minimum element? Push, pop and min should all operate in 0(1) time.
Hints: #27, #59, #78

#27 3.2 Observe that the minimum element doesn't change very often. It only changes when a
        smaller element is added, or when the smallest element is popped.
#59 3.2 What if we kept track of extra data at each stack node? What sort of data might make it
        easier to solve the problem?
#78 3.2 Consider having each node know the minimum of its "substack" (all the elements
        beneath it, including itself).
=========================================================================================================
3.3 Stack of Plates: Imagine a (literal) stack of plates. If the stack gets too high, it might topple.
Therefore, in real life, we would likely start a new stack when the previous stack exceeds some
threshold. Implement a data structure SetOfStacks that mimics this. SetOfStacks should be
composed of several stacks and should create a new stack once the previous one exceeds capacity.
SetOfStacks. push () and SetOfStacks. pop () should behave identically to a single stack
(that is, pop ( ) should return the same values as it would if there were just a single stack).
FOLLOW UP
Implement a function popAt (int index) which performs a pop operation on a specific sub-stack.
Hints: #64, #87
=========================================================================================================
3.4 Queue via Stacks: Implement a MyQueue class which implements a queue using two stacks.
Hints: #98, #7 74
P9 2l6
=========================================================================================================
3.5 Sort Stack: Write a program to sort a stack such that the smallest items are on the top. You can use
an additional temporary stack, but you may not copy the elements into any other data structure
(such as an array). The stack supports the following operations: push, pop, peek, and isEmpty.
Hints: # 75, #32, #43
=========================================================================================================
3.6 Animal Shelter: An animal shelter, which holds only dogs and cats, operates on a strictly"first in,
first out" basis. People must adopt either the "oldest" (based on arrival time) of all animals at the shelter,
or they can select whether they would prefer a dog or a cat (and will receive the oldest animal of
that type). They cannot select which specific animal they would like. Create the data structures to
maintain this system and implement operations such as enqueue, dequeueAny, dequeueDog,
and dequeueCat. You may use the built-in Linked List data structure.
Hints: #22, #56, #63
=========================================================================================================
Additional Questions: Linked Lists (#2.6), Moderate Problems (#16.26), Hard Problems (#17.9).
Hints start on page 653.
=========================================================================================================